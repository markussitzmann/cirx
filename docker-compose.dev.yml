version: '3.9'

services:

  cirx:
    image: ${APP_NAME}:${APP_VERSION}
    container_name: ${APP_NAME}
    volumes:
      - ${APP_HOME}:/home/app
      - ${APP_HOME}/nginx:/home/nginx
    ports:
      - "8000:8000"
    networks:
      - app_network
    environment:
      - APP_NAME
      - APP_VERSION
      - APP_UID
      - APP_GID
      - APP_VIRTUAL_HOSTNAME
      - POSTGRES_USER
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_PASSWORD
      - DJANGO_SUPERUSER_USERNAME
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_EMAIL
      - VIRTUAL_HOST=${APP_VIRTUAL_HOSTNAME}
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
      - LETSENCRYPT_HOST
      - LETSENCRYPT_EMAIL
      - LETSENCRYPT_TEST
    depends_on:
      - cirx-postgres
    entrypoint: [ "/home/app/docker-entrypoint.dev.sh" ]
    command: python /home/app/appsite/manage.py runserver 0.0.0.0:8000

  cirx-postgres:
    image: postgres:latest
    container_name: ${APP_NAME}-postgres
    volumes:
      - postgres_db_volume:/var/lib/postgresql
    ports:
      - "5432:5432"
    networks:
      - app_network
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready", "-U $POSTGRES_USER" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

#  cirx-rabbitmq:
#    image: rabbitmq:3.8-management
#    container_name: ${APP_NAME}-rabbitmq
#    ports:
#      - "5673:5672"
#      - "15673:15672"
#    volumes:
#      - rabbitmq_volume:/var/lib/rabbitmq/
#      - rabbitmq_volume:/var/log/rabbitmq
#    networks:
#      - app_network
#    environment:
#      - RABBITMQ_DEFAULT_USER
#      - RABBITMQ_DEFAULT_PASS
#    healthcheck:
#      test: rabbitmq-diagnostics -q ping
#      interval: 5s
#      timeout: 15s
#      retries: 1

  cirx-cache:
    image: redis:6.2-bullseye
    container_name: ${APP_NAME}-cache
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning #--requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache_volume:/data
    networks:
      - app_network

  cirx-flower:
    image: mher/flower
    container_name: ${APP_NAME}-flower
    environment:
      - CELERY_BROKER_URL=redis://cirx-cache
      - CELERY_RESULT_BACKEND=redis://cirx-cache
      - FLOWER_PORT=8888
    #command: [ 'celery', 'flower', '--broker=redis://cirx-cache:6379', '--port=8888' ]
    ports:
      - 8888:8888
    depends_on:
      - cirx-cache
      - cirx-worker1
    networks:
      - app_network

  cirx-worker1:
    image: ${APP_NAME}:${APP_VERSION}
    container_name: ${APP_NAME}-worker1
    volumes: &worker_volumes
      - ${APP_HOME}:/home/app
      - ${APP_HOME}/logging:/logging
      - ${APP_HOME}/pids:/pids
    networks:
      - app_network
    environment: &worker_env
      - APP_NAME
      - APP_VERSION
      - APP_UID
      - APP_GID
      - APP_VIRTUAL_HOSTNAME
      - POSTGRES_USER
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_PASSWORD
      - VIRTUAL_HOST=${APP_VIRTUAL_HOSTNAME}
      - RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS
    entrypoint: [ "/home/app/docker-entrypoint.worker.sh" ]
    working_dir: "/home/app/appsite"
#    command: ['celery', '-A', 'appsite', 'worker', '-l', 'info', "--logfile=/logging/cirx-worker1.log", "--pidfile=/pids/cirx-worker1.pid"]
    command: [ 'celery', '-A', 'appsite', 'worker', '-l', 'info', "--logfile=/logging/cirx-worker1.log"]

    restart: on-failure
    depends_on:
#      - cirx-rabbitmq
      - cirx-cache

#  cirx-worker2:
#    image: ${APP_NAME}:${APP_VERSION}
#    container_name: ${APP_NAME}-worker2
#    volumes: *worker_volumes
#    networks:
#      - app_network
#    environment: *worker_env
#    entrypoint: [ "/home/app/docker-entrypoint.worker.sh" ]
#    working_dir: "/home/app/appsite"
#    command: ['celery', '-A', 'appsite', 'worker', '-l', 'info', "--logfile=/logging/cirx-worker2.log", "--pidfile=/pids/cirx-worker2.pid"]
#    #restart: on-failure
#    depends_on:
#      - cirx-rabbitmq

volumes:
  postgres_db_volume:
    name: ${APP_NAME}-postgres-db-volume
  rabbitmq_volume:
    name: ${APP_NAME}-rabbitmq_volume
  cache_volume:
    driver: local

networks:
  app_network:
    external:
      name: ${APP_NAME}-backend


