# tkcactvs Property Definition by Wolf-Dietrich Ihlenfeldt 02/28/2007 15:20 cis
NAME E_SCAFFOLD_TREE_STRUCTURE
AUTHOR "Wolf-D. Ihlenfeldt"
EMAIL wdi@xemistry.com
VERSION 1.0
DATE "2007-02-28 15:20:31"
DESCRIPTION "Simplified scaffold structure"
OUTMODE P_OUT_YES
OUTLEVEL 4
MENUNAME "Scaffold Tree Structure"
VALTYPE P_STRUCTURE
INVALIDATION INVAL_ATOMCHANGE|INVAL_BONDCHANGE|INVAL_MERGE|INVAL_ATOM|INVAL_BOND|INVAL_RING
DEPENDS "A_TYPE A_ELEMENT B_TYPE B_ORDER"
ATTACHMENT P_ENS
PRECISION 4
FLAGS TRUSTED|PORTABLE|EXPORT
REGEXPFLAGS none
CONSTRAINTS NONE
TIMEOUT 0
ACCESS PA_NONE
FUNCTYPE PF_TCLSCRIPT
FUNCNAME CSgetE_SCAFFOLD_TREE_STRUCTURE 3
proc CSsimplify {eh {adel_ll {}} {r_l {}} {db_ll {}}} {
	# second parameter is list of alternative atom removal sets.
	# use the one with lowest result structure hashcode
	set ehbest ""
	foreach adel_l $adel_ll db_l $db_ll r $r_l {
		if {$r!="" && [ring get $eh $r Y_AROMATIC]=="some" && [ring get $eh $r R_AROMATIC]!="aromatic"} {
			# rule 11
			continue
		}
		set iserror 0
		set ehtmp [ens dup $eh {} {} {} 1]
		# remove atoms marked for deletion
		set ndel [eval atom delete $ehtmp $adel_l]
		# remove linker atoms which are now sidechains
		set adel_l {}
		foreach a [ens atoms $ehtmp {asidechain !hydrogen}] {
			if {[atom bonds $ehtmp $a {doublebond linkeratom} bool]} continue
			if {[atom bonds $ehtmp $a {doublebond ringatom} bool]} continue
			lappend adel_l $a
		}
		incr ndel [eval atom delete $ehtmp $adel_l]
		# clean up isolated atoms (H)
		incr ndel [eval atom delete $ehtmp [ens atoms $ehtmp valence0]]
		foreach b $db_l {
			if {[bond get $ehtmp $b B_ISAROMATIC]} continue
			if {[catch {bond create $ehtmp $b 2}]} {
				set iserror 1
				break
			}
		}
		ens uncharge $ehtmp
		if {[ens get $ehtmp E_NMOLECULES]>1} {
			set iserror 1
		}
		if {$iserror} {
			ens delete $ehtmp
			continue
		}
		ens hadd $ehtmp
		if {$r==""} {
			set ehbest $ehtmp
			break
		}
		set tmplinkercnt [ens bonds $ehtmp linkerbond count]
		set tmpringbdelta [expr [ens bonds $ehtmp multiringbond count]-([ens get $ehtmp E_NESSSR]-1)]
		set tmphash [ens get $ehtmp E_HASHY]
		set tmpnringsys [ens get $ehtmp E_RINGSYSTEM_COUNT]
		set tmpnaroringsys [ens ringsys $ehtmp {aroringsystem} count]
		set tmpnxatoms [ring atoms $eh $r xatom count]
		set tmpnnatoms [ring atoms $eh $r nitrogen count]
		set tmpnoatoms [ring atoms $eh $r oxygen count]
		set tmpnsatoms [ring atoms $eh $r sulphur count]
		set tmprsize [ring get $eh $r R_SIZE]
		set tmpr356 [expr {$tmprsize in [list 3 5 6]}]
		# check whether ring is linked via hetero ring atom on either end of linker
		set tmpxrlinker 0
		foreach a [ring atoms $eh $r] {
			foreach b [atom bonds $eh $a blinker] {
				set a2 [bond partner $eh $b $a]
				if {[atom filter $eh $a2 {ringatom xatom}]} {
					# direct connection to 2nd ring, no spacer link atoms
					set tmpxrlinker 1
					break
				}
			}
			if {$tmpxrlinker} break
			# atom linker spacer atoms - get list of all linker atoms, check
			# each for heteroatom ring neighbors
			foreach a2 [atom neighbors $eh $a alinker {} -20] {
				if {[atom neighbors $eh $a2 {ringatom xatom} bool]} {
					set tmpxrlinker 1
					break
				}
			}
			if {$tmpxrlinker} break
		}
		if {$ehbest!=""} {
			if {$tmplinkercnt>$bestlinkercnt} {
				# rule 3
				ens delete $ehtmp
				continue
			} elseif {$tmplinkercnt<$bestlinkercnt} {
				;
			} elseif {abs($tmpringbdelta)<abs($bestringbdelta)} {
				# rule 4
				ens delete $ehtmp
				continue
			} elseif {abs($tmpringbdelta)>abs($bestringbdelta)} {
				;
			} elseif {$tmpringbdelta<$bestringbdelta} {
				# rule 5
				ens delete $ehtmp
				continue
			} elseif {$tmpringbdelta>$bestringbdelta} {
				;
			} elseif {$bestr356 && !$tmpr356} {
				# rule 6
				ens delete $ehtmp
				continue
			} elseif {!$bestr356 && $tmpr356} {
				;
			} elseif {$tmpnringsys==$bestnringsys && $tmpnaroringsys<$bestnaroringsys} {
				# rule 7
				ens delete $ehtmp
				continue
			} elseif {$tmpnxatoms>$bestnxatoms} {
				# rule 8
				ens delete $ehtmp
				continue
			} elseif {$tmpnxatoms<$bestnxatoms} {
				;
			} elseif {$tmpnnatoms>$bestnnatoms} {
				# rule 9 N
				ens delete $ehtmp
				continue
			} elseif {$tmpnnatoms<$bestnnatoms} {
				;
			} elseif {$tmpnoatoms>$bestnoatoms} {
				# rule 9 O
				ens delete $ehtmp
				continue
			} elseif {$tmpnoatoms<$bestnoatoms} {
				;
			} elseif {$tmpnsatoms>$bestnsatoms} {
				# rule 9 S
				ens delete $ehtmp
				continue
			} elseif {$tmpnsatoms<$bestnsatoms} {
				;
			} elseif {$tmprsize>$bestrsize} {
				# rule 10
				ens delete $ehtmp
				continue
			} elseif {$tmprsize<$bestrsize} {
				;

			} elseif {$bestxrlinker && !$tmpxrlinker} {
				# rule 12
				ens delete $ehtmp
				continue
			} elseif {!$bestxrlinker && $tmpxrlinker} {
				;
			} elseif {[string compare $tmphash $besthash]>0} {
				# rule 13
				ens delete $ehtmp
				continue
			}
			ens delete $ehbest
		}
		set ehbest $ehtmp
		set besthash $tmphash
		set bestlinkercnt $tmplinkercnt
		set bestndel $ndel
		set bestringbdelta $tmpringbdelta
		set bestnaroringsys $tmpnaroringsys
		set bestnringsys $tmpnringsys
		set bestnxatoms $tmpnxatoms
		set bestnnatoms $tmpnnatoms
		set bestnoatoms $tmpnoatoms
		set bestnsatoms $tmpnsatoms
		set bestrsize $tmprsize
		set bestxrlinker $tmpxrlinker
		set bestr356 $tmpr356
	}
	if {$ehbest=="" || $ndel==0} {
		if {$ehbest!=""} { ens delete $ehbest }
		error "no simplified structure found"
	}
	ens purge $ehbest {A_ISOTOPE B_FLAGS A_LABEL_STEREO B_LABEL_STEREO A_CIP_STEREO B_CIP_STEREO A_HASH_STEREO B_HASH_STEREO}
	ens set $eh E_SCAFFOLD_TREE_STRUCTURE $ehbest
	ens delete $ehbest
	return $ndel
}
proc CSremoveOneFromRingList {eh rl} {
	set adel_ll {}
	set db_ll {}
	set r_l {}
	foreach r $rl {
		set alist [ring atoms $eh $r]
		set blist {}
		foreach ri [ens rings $eh sssr] {
			if {$ri==$r} continue
			if {[ring compare $eh $r $ri]=="overlap" && [ring get $eh $r R_SIZE]==[ring get $eh $ri R_SIZE]} {
				set alist {}
				break
			}
			set alist [eval ldelete [list $alist] [ring atoms $eh $ri]]
			if {[ring compare $eh $r $ri]!="annealed"} continue
			# rule 1, plus double bonds for removed aromatic atoms
			# get list of bonds to change to double bond if possible
			if {([ring get $eh $r R_SIZE]==3 && [ring get $eh $r R_HETERO]) || [ring get $eh $r R_AROMATIC]=="aromatic"} {
				set b [bond bond $eh [ring intersect $eh $r $ri]]
				# do not change N with 2e to N with double bond
				# sch12 in paper, not explained there, personal communication with P. Ertl
				if {[bond atoms $eh $b {N aaromatic !doublebond} bool]} continue
				lappend blist $b
			}
		}
		if {[llength $alist]==0} {
			continue
		}
		lappend adel_ll $alist
		lappend db_ll $blist
		lappend r_l $r
	}
	CSsimplify $eh $adel_ll $r_l $db_ll
	return 1
}

proc CSgetE_SCAFFOLD_TREE_STRUCTURE {eh} {
	if {[ens rings $eh {} count]==0} {
		error "no rings in structure"
	}
	if {[ens get $eh E_NMOLECULES]>1} {
		error "multiple fragments in structure"
	}
	# step 0: basic framework, with exocylic and exolinker double bonds preserved
	# attempt empty atom list for removal and see whether any side chains etc. get cleared
	# as side effect
	if {![catch {CSsimplify $eh [list {}]}]} return
	if {[ens rings $eh {} count]==1} {
		error "single ring left, no addional simplification possible"
	}
	# rule 1: remove heterocycles size 3 first
	set rl [ens rings $eh {heterocycle ring3 sssr}]
	# get list of potential removal rings.
	# rule 2: do not touch those with size >= 12 if other rings exist
	if {[llength $rl]==0} {
		set rl [ens rings $eh {sssr !macrocycle}]
		if {[llength $rl]==0} {
			set rl [ens rings $eh sssr]
		}
	}
	if {[CSremoveOneFromRingList $eh $rl]} return
	error "no additional simplification possible"
}
LOGMODE DONTCARE
NAMESPACE .xemistry.com
LITERATURE "Schuffenhauer et al., J. Chem. Inf. Model. 2007, 47, 47-58"
